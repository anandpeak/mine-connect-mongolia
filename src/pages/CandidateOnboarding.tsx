import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { ArrowLeft, Wrench, Building, Truck, HardHat, Shield, Settings, Search, X } from "lucide-react";

const CandidateOnboarding = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [profile, setProfile] = useState({
    interests: [],
    jobCategory: "",
    equipmentTypes: [],
    licenseCategory: "",
    hasCertificate: null,
    learningPreference: "",
    experience: "",
    positionSearch: "",
    salaryExpectation: [1.5],
    additionalInfo: "",
    contactInfo: {
      phone: "",
      firstName: "",
      lastName: "",
      email: ""
    }
  });

  const steps = [
    {
      title: "–¢–∞ –∞–ª–∏–∞—Ä –Ω—å —Å–æ–Ω–≥–æ—Ö –≤—ç?",
      type: "interests"
    },
    {
      title: "–Ø–º–∞—Ä –º—ç—Ä–≥—ç–∂–ª—ç—ç—Ä –∞–∂–∏–ª —Ö–∞–π–∂ –±–∞–π–≥–∞–∞–≥–∞–∞ —Å–æ–Ω–≥–æ–Ω–æ —É—É.",
      type: "jobCategory"
    },
    {
      title: "–ñ–æ–ª–æ–æ–¥–æ–≥ —Ç–æ–Ω–æ–≥ —Ç–µ—Ö–≤—ç—Ä—ç—ç —Å–æ–Ω–≥–æ–Ω–æ —É—É.",
      type: "equipment"
    },
    {
      title: "–ñ–æ–ª–æ–æ–Ω—ã “Ø–Ω—ç–º–ª—ç—Ö–Ω–∏–π –∞–Ω–≥–∏–ª–∞–ª —Å–æ–Ω–≥–æ–Ω–æ —É—É.",
      type: "license"
    },
    {
      title: "–¢–∞–Ω–¥ –º—ç—Ä–≥—ç–∂–ª–∏–π–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±–∞–π–≥–∞–∞ —É—É?",
      type: "certificate"
    },
    {
      title: "”®”©—Ä–∏–π–Ω —Å—É—Ä—Å–∞–Ω —Å—É—Ä–≥—É—É–ª—å / —Å—É—Ä–≥–∞–ª—Ç –±–∏—á–Ω—ç —É—É.",
      type: "learning"
    },
    {
      title: "–¢–∞ —Ö—ç–¥—ç–Ω –∂–∏–ª–∏–π–Ω –∞–∂–ª—ã–Ω —Ç—É—Ä—à–ª–∞–≥–∞—Ç–∞–π –≤—ç?",
      type: "experience"
    },
    {
      title: "–ê–∂–∏–ª–ª–∞—Ö –±–∞–π—Å–∞–Ω –±–∞–π–≥—É—É–ª–ª–∞–≥—É—É–¥–∞–∞ —Å–æ–Ω–≥–æ–Ω–æ —É—É.",
      type: "search"
    },
    {
      title: "–¶–∞–ª–∏–Ω–≥–∏–π–Ω —Ö“Ø–ª—ç—ç–ª—Ç—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É.",
      type: "salary"
    },
    {
      title: "–ë–∏–¥ —Ç–∞–Ω–∞–π —Ç—É—Ö–∞–π –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–≤–∞—Ö–¥–∞–∞ –∑–∞—Ä–∏–º –∑“Ø–π–ª–∏–π–≥ –æ—Ä—Ö–∏–≥–¥—É—É–ª—Å–∞–Ω –±–∞–π—Ö –º–∞–≥–∞–¥–≥“Ø–π.",
      type: "feedback"
    },
    {
      title: "–ë–∏–¥ —Ç–∞–Ω—Ç–∞–π —ç—Ä–≥—ç—ç–¥ —Ö–æ–ª–±–æ–≥–¥–æ—Ö —Ç—É–ª –¥–∞—Ä–∞–∞—Ö –º—ç–¥—ç—ç–ª–ª“Ø“Ø–¥–∏–π–≥ –æ—Ä—É—É–ª–∞–∞—Ä–∞–π.",
      type: "contact"
    }
  ];

  const interests = [
    { id: "engineer", label: "–ò–¥—ç–≤—Ö–∏—Ç—ç–π –∞–∂–∏–ª —Ö–∞–π–∂ –±–∞–π–Ω–∞", icon: "üë∑" },
    { id: "register", label: "–†–æ—Å—Ç–µ—Ä—ã–Ω –∞–º—Ä–∞–ª—Ç–∞–∞—Ä –∞–∂–∏–ª —Ö–∞–π–∂ –±–∞–π–Ω–∞", icon: "üí∞" },
    { id: "specialist", label: "–¢—É—Ä—à–ª–∞–≥–∞—Ç–∞–π –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω", icon: "üíé" },
    { id: "career", label: "–ê–∂–∏–ª —Ö–∞–π–≥–∞–∞–≥“Ø–π —á –±“Ø—Ä—Ç–≥“Ø“Ø–ª—å–µ!", icon: "üë®‚Äçüíº" }
  ];

  const jobCategories = [
    { id: "machine-operator", label: "–ú–∞—à–∏–Ω –º–µ—Ö–∞–Ω–∏–∑–º—ã–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä", icon: <Truck className="w-6 h-6" /> },
    { id: "construction-operator", label: "–°—É—É—Ä–∏–Ω —Ç–µ—Ö–≤—ç—Ä—ç–º–∂–∏–π–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä", icon: <Building className="w-6 h-6" /> },
    { id: "engineer", label: "–ò–Ω–∂–µ–Ω–µ—Ä", icon: <Settings className="w-6 h-6" /> },
    { id: "mechanic", label: "–ú–µ—Ö–∞–Ω–∏–∫", icon: <Wrench className="w-6 h-6" /> },
    { id: "security", label: "–ê—é—É–ª–≥“Ø–π –∞–∂–∏–ª–ª–∞–≥–∞–∞", icon: <Shield className="w-6 h-6" /> },
    { id: "guard", label: "–ì–∞–≥–Ω—É—É—Ä", icon: <HardHat className="w-6 h-6" /> }
  ];

  const equipmentTypes = [
    { id: "excavator", label: "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä/Excavator", icon: "üöú" },
    { id: "loader", label: "–ö–æ–≤—à/Loader", icon: "üöõ" },
    { id: "dump-truck", label: "–•”©–≤–æ/Dump truck", icon: "üöö" },
    { id: "mining-truck", label: "–î–∞–º–ø/Mining dump truck", icon: "üöõ" }
  ];

  const licenseCategories = ["A", "B", "BE", "C1", "C1E"];
  
  const experienceRanges = [
    "–¢—É—Ä—à–ª–∞–≥–∞–≥“Ø–π",
    "1-5 –∂–∏–ª",
    "5-8 –∂–∏–ª", 
    "8-10 –∂–∏–ª",
    "10-15 –∂–∏–ª"
  ];

  const updateProfile = (field, value) => {
    setProfile(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const updateContactInfo = (field, value) => {
    setProfile(prev => ({
      ...prev,
      contactInfo: {
        ...prev.contactInfo,
        [field]: value
      }
    }));
  };

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(prev => prev + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const finishOnboarding = () => {
    alert("–ü—Ä–æ—Ñ–∞–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç!");
    console.log("Profile completed:", profile);
  };

  const renderStep = () => {
    const step = steps[currentStep];
    
    switch (step.type) {
      case "interests":
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {interests.map((interest) => (
                <Card 
                  key={interest.id}
                  className={`cursor-pointer transition-all hover:scale-105 ${
                    profile.interests.includes(interest.id) ? 'ring-2 ring-primary bg-primary/5' : ''
                  }`}
                  onClick={() => {
                    const newInterests = profile.interests.includes(interest.id)
                      ? profile.interests.filter(i => i !== interest.id)
                      : [...profile.interests, interest.id];
                    updateProfile('interests', newInterests);
                  }}
                >
                  <CardContent className="p-6 text-center">
                    <div className="text-4xl mb-4">{interest.icon}</div>
                    <h3 className="font-medium">{interest.label}</h3>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case "jobCategory":
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {jobCategories.map((category) => (
                <Card 
                  key={category.id}
                  className={`cursor-pointer transition-all hover:scale-105 ${
                    profile.jobCategory === category.id ? 'ring-2 ring-primary bg-primary/5' : ''
                  }`}
                  onClick={() => updateProfile('jobCategory', category.id)}
                >
                  <CardContent className="p-6 text-center">
                    <div className="flex justify-center mb-4 text-primary">
                      {category.icon}
                    </div>
                    <h3 className="font-medium">{category.label}</h3>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case "equipment":
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {equipmentTypes.map((equipment) => (
                <Card 
                  key={equipment.id}
                  className={`cursor-pointer transition-all hover:scale-105 ${
                    profile.equipmentTypes.includes(equipment.id) ? 'ring-2 ring-primary bg-primary/5' : ''
                  }`}
                  onClick={() => {
                    const newEquipment = profile.equipmentTypes.includes(equipment.id)
                      ? profile.equipmentTypes.filter(e => e !== equipment.id)
                      : [...profile.equipmentTypes, equipment.id];
                    updateProfile('equipmentTypes', newEquipment);
                  }}
                >
                  <CardContent className="p-6 text-center">
                    <div className="text-4xl mb-4">{equipment.icon}</div>
                    <h3 className="font-medium">{equipment.label}</h3>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case "license":
        return (
          <div className="space-y-4">
            <Label>–°–æ–Ω–≥–æ–ª—Ç —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞</Label>
            <Select onValueChange={(value) => updateProfile('licenseCategory', value)}>
              <SelectTrigger>
                <SelectValue placeholder="–°–æ–Ω–≥–æ–ª—Ç —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞" />
              </SelectTrigger>
              <SelectContent>
                {licenseCategories.map((category) => (
                  <SelectItem key={category} value={category}>{category}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        );

      case "certificate":
        return (
          <div className="space-y-4">
            <div className="flex gap-4 justify-center">
              <Button
                variant={profile.hasCertificate === false ? "default" : "outline"}
                onClick={() => updateProfile('hasCertificate', false)}
                className="px-8"
              >
                –ë–∞–π–≥–∞–∞
              </Button>
              <Button
                variant={profile.hasCertificate === true ? "default" : "outline"}
                onClick={() => updateProfile('hasCertificate', true)}
                className="px-8"
              >
                –ë–∞–π—Ö–≥“Ø–π
              </Button>
            </div>
          </div>
        );

      case "learning":
        return (
          <div className="space-y-4">
            <textarea
              className="w-full p-4 border border-input rounded-md resize-none focus:outline-none focus:ring-2 focus:ring-ring"
              rows={4}
              placeholder="”®”©—Ä–∏–π–Ω —Å—É—Ä—Å–∞–Ω —Å—É—Ä–≥—É—É–ª—å / —Å—É—Ä–≥–∞–ª—Ç –±–∏—á–Ω—ç —É—É."
              value={profile.learningPreference}
              onChange={(e) => updateProfile('learningPreference', e.target.value)}
            />
          </div>
        );

      case "experience":
        return (
          <div className="space-y-4">
            <Select onValueChange={(value) => updateProfile('experience', value)}>
              <SelectTrigger>
                <SelectValue placeholder="–¢—É—Ä—à–ª–∞–≥–∞–≥“Ø–π" />
              </SelectTrigger>
              <SelectContent>
                {experienceRanges.map((range) => (
                  <SelectItem key={range} value={range}>{range}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        );

      case "search":
        return (
          <div className="space-y-4">
            <div className="relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                className="pl-10"
                placeholder="–≠–Ω–¥—ç—ç—Å —Ö–∞–π–Ω–∞ —É—É."
                value={profile.positionSearch}
                onChange={(e) => updateProfile('positionSearch', e.target.value)}
              />
            </div>
            <div className="text-center py-8">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <X className="w-8 h-8 text-gray-400" />
              </div>
              <p className="text-muted-foreground">–û–¥–æ–æ–≥–æ–æ—Ä —Å–æ–Ω–≥–æ—Å–æ–Ω –±–∞–π–≥—É—É–ª–ª–∞–≥–∞ –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.</p>
            </div>
          </div>
        );

      case "salary":
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between text-sm text-muted-foreground mb-4">
              <span>1,5 —Å–∞—è-—Å –¥–æ–æ—à</span>
              <span>1,5 —Å–∞—è-3 —Å–∞—è</span>
              <span>3 —Å–∞—è-5 —Å–∞—è</span>
              <span>5 —Å–∞—è–∞—Å –¥—ç—ç—à</span>
            </div>
            <div className="px-4">
              <Slider
                value={profile.salaryExpectation}
                onValueChange={(value) => updateProfile('salaryExpectation', value)}
                max={4}
                min={1}
                step={0.5}
                className="w-full"
              />
            </div>
            <div className="flex justify-between text-xs text-orange-500">
              <div className="text-center">
                <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center mb-2">
                  <span>ü™ô</span>
                </div>
                <span>1,5 —Å–∞—è-—Å –¥–æ–æ—à</span>
              </div>
              <div className="text-center">
                <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center mb-2">
                  <span>üíµ</span>
                </div>
                <span>1,5 —Å–∞—è-3 —Å–∞—è</span>
              </div>
              <div className="text-center">
                <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center mb-2">
                  <span>üí∞</span>
                </div>
                <span>3 —Å–∞—è-5 —Å–∞—è</span>
              </div>
              <div className="text-center">
                <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center mb-2">
                  <span>üíé</span>
                </div>
                <span>5 —Å–∞—è–∞—Å –¥—ç—ç—à</span>
              </div>
            </div>
          </div>
        );

      case "feedback":
        return (
          <div className="space-y-4 text-center">
            <div className="w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <span className="text-3xl">üë∑‚Äç‚ôÇÔ∏è</span>
            </div>
            <p className="text-muted-foreground">
              –î–∞—Ä–∞–∞—Ö —Ö—ç—Å—ç–≥—Ç ”©”©—Ä–∏–π–Ω —Ç—É—Ö–∞–π —Ö“Ø–≤–∞–∞–ª—Ü—Å–∞–Ω–∞–∞—Ä –∞–∂–∏–ª –æ–ª–æ—Ö–æ–¥ —É–ª–∞–º –¥–∞–≤—É—É —Ç–∞–ª—Ç–∞–π –¥—ç—Ö—ç–º –±–æ–ª–æ—Ö —é–º.
            </p>
            <textarea
              className="w-full p-4 border border-input rounded-md resize-none focus:outline-none focus:ring-2 focus:ring-ring"
              rows={4}
              placeholder="–¢–∏–π–º –±–æ–ª —ç–Ω–¥ –±–∏—á–Ω—ç “Ø“Ø"
              value={profile.additionalInfo || ""}
              onChange={(e) => updateProfile('additionalInfo', e.target.value)}
            />
          </div>
        );

      case "contact":
        return (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label>–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä</Label>
              <Input
                placeholder="9999-9999"
                value={profile.contactInfo.phone}
                onChange={(e) => updateContactInfo('phone', e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label>–û–≤–æ–≥</Label>
              <Input
                placeholder="”®”©—Ä–∏–π–Ω –æ–≤–≥–∏–π–≥ –±–∏—á–Ω—ç “Ø“Ø."
                value={profile.contactInfo.lastName}
                onChange={(e) => updateContactInfo('lastName', e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label>–ù—ç—Ä</Label>
              <Input
                placeholder="”®”©—Ä–∏–π–Ω –Ω—ç—Ä–∏–π–≥ –±–∏—á–Ω—ç “Ø“Ø." 
                value={profile.contactInfo.firstName}
                onChange={(e) => updateContactInfo('firstName', e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label>–ú—ç–π–ª —Ö–∞—è–≥</Label>
              <Input
                type="email"
                placeholder="example@gmail.com"
                value={profile.contactInfo.email}
                onChange={(e) => updateContactInfo('email', e.target.value)}
              />
            </div>
            
            <div className="flex items-center space-x-2 mt-6">
              <input 
                type="checkbox" 
                id="newsletter"
                className="w-4 h-4"
              />
              <Label className="text-sm">–•—ç–≥–∂–ª–∏–π–Ω –±—ç—Ä—Ö—à—ç—ç–ª—Ç—ç–π –∏—Ä–≥—ç–Ω</Label>
            </div>
          </div>
        );

      default:
        return <div>–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞</div>;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="w-full max-w-2xl">
        {/* Header */}
        <div className="mb-8">
          <button 
            onClick={prevStep}
            disabled={currentStep === 0}
            className="inline-flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors bg-transparent border-none cursor-pointer disabled:opacity-50"
          >
            <ArrowLeft className="w-4 h-4" />
            –ë—É—Ü–∞—Ö
          </button>
        </div>

        {/* Progress Indicator */}
        <div className="flex justify-center mb-8">
          <div className="flex items-center gap-1">
            {Array.from({ length: steps.length }).map((_, index) => (
              <div 
                key={index}
                className={`w-2 h-2 rounded-full ${
                  index === currentStep ? 'bg-black' : 
                  index < currentStep ? 'bg-gray-400' : 'bg-gray-200'
                }`}
              />
            ))}
          </div>
        </div>

        {/* Main Card */}
        <Card className="shadow-lg border-0">
          <CardContent className="p-8">
            <h1 className="text-2xl font-bold text-center mb-8">
              {steps[currentStep].title}
            </h1>
            
            {renderStep()}
            
            <div className="flex justify-center mt-8">
              {currentStep === steps.length - 1 ? (
                <Button 
                  onClick={finishOnboarding} 
                  className="px-8"
                  disabled={!profile.contactInfo.phone || !profile.contactInfo.firstName || !profile.contactInfo.email}
                >
                  “Æ—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç—Ö
                </Button>
              ) : (
                <Button onClick={nextStep} className="px-8">
                  “Æ—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç—Ö
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default CandidateOnboarding;